import pl.allegro.tech.build.axion.release.domain.properties.TagProperties
import pl.allegro.tech.build.axion.release.domain.scm.ScmPosition

buildscript {
  ext {
    apachePoiVersion = '5.2.2'
    commonsLang3Version = '3.11'
    commonsCodecVersion = '1.15'
    commonsIoVersion = '2.11.0'
    elasticsearchVersion = '7.5.2'
    guavaVersion = '30.0-jre'
    httpComponentsVersion = '4.5.13'
    jenaVersion = '3.17.0'
    springBootVersion = '2.6.6'
    springSecurityVersion = '5.6.2'
  }
}

plugins {
  id "pl.allegro.tech.build.axion-release" version "1.13.3"
  id "idea"
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id "org.springframework.boot" version "${springBootVersion}" apply false
  id "java"
  id "maven-publish"
}

repositories {
  maven { url "https://plugins.gradle.org/m2/" }
}

scmVersion {
  tag {
    prefix = "v"
    versionSeparator = ""
    branchPrefix = [
            'release/.*': 'release-v',
            'hotfix/.*' : 'hotfix-v'
    ]
    initialVersion = {
      final TagProperties rules,
      final ScmPosition position -> "0.5.0-fixed"
    }
  }
  nextVersion {
    suffix = "SNAPSHOT"
    separator = "-"
  }
}

subprojects {
  apply plugin: "java"
  apply plugin: "java-library"
  apply plugin: "idea"
  apply plugin: "io.spring.dependency-management"
  apply plugin: 'maven-publish'
  apply plugin: 'project-report'

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://maven.springframework.org/release" }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
  }

  dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    }
    dependencies {
      // libs
      dependency("com.google.guava:guava:$guavaVersion")
      dependency("commons-codec:commons-codec:$commonsCodecVersion")
      dependency("commons-io:commons-io:$commonsIoVersion")
      dependency('io.vavr:vavr:0.9.2')
      dependency('javax.inject:javax.inject:1')
      dependency('joda-time:joda-time:2.9.9')
      dependency('org.apache.commons:commons-collections4:4.4')
      dependency("org.apache.commons:commons-lang3:$commonsLang3Version")
      dependency("org.apache.httpcomponents:fluent-hc:$httpComponentsVersion")
      dependency("org.apache.httpcomponents:httpclient:$httpComponentsVersion")
      dependency("org.apache.jena:jena-arq:$jenaVersion")
      dependency("org.apache.jena:jena-core:$jenaVersion")
      dependency("org.apache.jena:jena-tdb:$jenaVersion")
      dependency("org.apache.jena:jena-tdb2:$jenaVersion")
      dependency("org.apache.poi:poi:$apachePoiVersion")
      dependency("org.apache.poi:poi-ooxml:$apachePoiVersion")
      dependency("org.elasticsearch:elasticsearch:$elasticsearchVersion")
      dependency("org.elasticsearch.client:transport:$elasticsearchVersion")
      dependency('org.apache.commons:commons-pool2:2.11.1')
      dependency('cglib:cglib:3.3.0')

      // spring
      dependency("org.springframework.boot:spring-boot-starter:$springBootVersion")
      dependency("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
      dependency("org.springframework.boot:spring-boot-starter-json:$springBootVersion")
      dependency("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
      dependency("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion")
      dependency("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
      dependency("org.springframework.security.extensions:spring-security-saml2-core:1.0.10.RELEASE")

      // test
      dependency("ognl:ognl:3.1.12") // seems thymeleaf needs this library
      dependency("org.elasticsearch.test:framework:$elasticsearchVersion")
      dependency("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    }
  }

  dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
  }

  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"

  group = 'zone.cogni.asquare'
  version = scmVersion.version

  compileJava.options.encoding = "UTF-8"
  compileTestJava.options.encoding = "UTF-8"

  test {
    useJUnitPlatform()
  }

  task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    archiveClassifier = 'sources'

    from sourceSets.main.allSource
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        versionMapping {
          usage('java-api') {
            fromResolutionOf('runtimeClasspath')
          }
          usage('java-runtime') {
            fromResolutionResult()
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username = System.properties['archiva.user']
          password = System.properties['archiva.password']
        }
        name = 'public'
        url = System.properties['archiva.url']
      }
    }
  }
  build.finalizedBy(tasks.publishToMavenLocal)
}

idea {
  project {
    languageLevel = "1.8"
  }
}

project('access') {
  dependencies {
    // projects
    api project(':application-profile')
    api project(':cogni-core')
    api project(':cogni-libs')
    api project(':cogni-sem')
    api project(':triplestore')
    api project(':triplestore-jena-memory')

    // libs
    api('com.google.guava:guava')
    api('commons-codec:commons-codec')
    api('commons-io:commons-io')
    api('io.vavr:vavr')
    api('org.apache.commons:commons-lang3')
    api('org.apache.httpcomponents:httpclient')
    api('org.apache.jena:jena-arq')

    // spring
    api('org.springframework.boot:spring-boot-starter-aop')
    api('org.springframework.boot:spring-boot-starter-web')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('action-logger') {
  dependencies {
    // projects
    api project(':service')

    // libs
    api('org.apache.commons:commons-collections4')
    api('org.apache.commons:commons-lang3')

    // spring
    api('org.springframework.boot:spring-boot-starter-aop')
    api('org.springframework.boot:spring-boot-starter-json')
    api('org.springframework.boot:spring-boot-starter-web')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('application-profile') {
  dependencies {
    // projects
    api project(':cogni-core')

    // libs
    api('com.google.guava:guava')
    api('commons-io:commons-io')
    api('io.vavr:vavr')
    api('org.apache.jena:jena-core')

    // spring
    api('org.springframework.boot:spring-boot-starter-json')
    api('org.springframework.boot:spring-boot-starter-thymeleaf')

    // test
    testImplementation('ognl:ognl')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('application-profile-owl') {
  dependencies {
    // projects
    api project(':cogni-core')
    api project(':cogni-sem')
    api project(':application-profile')

    // libs
    api('com.google.guava:guava')
    api('io.vavr:vavr')
    api('org.apache.jena:jena-arq')
    api('org.apache.jena:jena-core')

    // spring
    api('org.springframework.boot:spring-boot-starter')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('application-profile-shacl') {
  dependencies {
    // projects
    api project(':access')
    api project(':application-profile')
    api project(':cogni-sem')

    // libs
    api('com.google.guava:guava')
    api('commons-io:commons-io')
    api('io.vavr:vavr')
    api('org.apache.jena:jena-core')

    // spring
    api('org.springframework.boot:spring-boot-starter')
  }
}

project('asquareroot') {
  dependencies {
    // projects
    api project(':access')
    api project(':cogni-libs')
    api project(':cogni-sem')
    api project(':security')
    api project(':service')
    api project(':triplestore')

    // libs
    api('org.apache.jena:jena-arq')
    api('org.elasticsearch:elasticsearch')
    api("org.elasticsearch.test:framework")

    // spring
    api('org.springframework.boot:spring-boot-starter')
    api('org.springframework.boot:spring-boot-starter-security')
    api('org.springframework.boot:spring-boot-starter-test')
    api('org.springframework.boot:spring-boot-starter-web')
    api('org.springframework.security:spring-security-test')
  }
}

project('cogni-core') {
  dependencies {
    // libs
    api('com.google.guava:guava')
    api('commons-io:commons-io')
    api('joda-time:joda-time')
    api('org.apache.commons:commons-lang3')

    // spring
    api('org.springframework.boot:spring-boot-starter-json')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('cogni-libs') {
  dependencies {
    // libs
    api('com.google.guava:guava')
    api('commons-io:commons-io')
    api('javax.inject:javax.inject')
    api('joda-time:joda-time')
    api('org.apache.commons:commons-lang3')
    api('org.apache.httpcomponents:fluent-hc')
    api('org.apache.jena:jena-arq')
    api('org.apache.jena:jena-core')

    // spring
    api('org.springframework.boot:spring-boot-starter-web')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('cogni-sem') {
  dependencies {
    // projects
    api project(':cogni-core')

    // libs
    api('com.google.guava:guava')
    api('org.apache.jena:jena-core')
    api('org.apache.jena:jena-arq')

    // spring
    api('org.springframework.boot:spring-boot-starter')
  }
}

project('cube') {
  dependencies {
    // projects
    api project(':access')
    api project(':application-profile')
    api project(':cogni-core')
    api project(':cogni-sem')
    api project(':service')
    api project(':triplestore')
    api project(':triplestore-jena-memory')

    // libs
    api('com.google.guava:guava')
    api('io.vavr:vavr')
    api('joda-time:joda-time')
    api('org.apache.commons:commons-collections4')
    api('org.apache.commons:commons-lang3')
    api('org.apache.jena:jena-arq')
    api('org.apache.jena:jena-core')

    // spring
    implementation("org.springframework.security:spring-security-core:$springSecurityVersion")

    // test
    testImplementation project(':cogni-libs')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('elasticproxy') {
  dependencyManagement {
    dependencies {
      dependency('org.elasticsearch.client:elasticsearch-rest-client:6.8.10')
    }
  }

  dependencies {
    // libs
    api('commons-io:commons-io')
    api('org.apache.httpcomponents:httpclient')
    api('org.elasticsearch.client:elasticsearch-rest-client')

    // spring
    api('org.springframework.boot:spring-boot-starter-thymeleaf')
    api('org.springframework.boot:spring-boot-starter-web')
  }
}

project('security') {
  dependencies {
    // projects
    api project(':service')

    // libs
    api('com.google.guava:guava')
    api('commons-codec:commons-codec')
    api('org.apache.commons:commons-collections4')
    api('io.vavr:vavr')
    api('javax.inject:javax.inject')
    api('org.apache.commons:commons-lang3')

    // spring
    api('org.springframework.boot:spring-boot-starter-json')
    api('org.springframework.boot:spring-boot-starter-security')
    api('org.springframework.boot:spring-boot-starter-web')
    api("org.springframework.security.extensions:spring-security-saml2-core")
  }
}

project('security2') {
  dependencies {
    // projects
    api project(':cogni-core')

    // libs
    api('org.apache.commons:commons-collections4')
    api('org.apache.commons:commons-lang3')

    // spring
    api('org.springframework.boot:spring-boot-starter-web')
    api('org.springframework.boot:spring-boot-starter-security')
    api('org.springframework.security:spring-security-saml2-service-provider')
  }
}

project('service') {
  dependencies {
    // projects
    api project(':access')
    api project(':application-profile')
    api project(':cogni-core')
    api project(':cogni-libs')
    api project(':cogni-sem')
    api project(':triplestore')
    api project(':triplestore-jena-memory')

    // libs
    api('com.google.guava:guava')
    api('commons-io:commons-io')
    api('io.vavr:vavr')
    api('joda-time:joda-time')
    api('org.apache.commons:commons-collections4')
    api('org.apache.commons:commons-lang3')
    api('org.apache.jena:jena-arq')
    api('org.apache.jena:jena-core')
    api('org.apache.poi:poi')
    api('org.apache.poi:poi-ooxml')
    api('org.elasticsearch:elasticsearch')

    // spring
    api('org.springframework.boot:spring-boot-starter-aop')
    api('org.springframework.boot:spring-boot-starter-json')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('transactional') {
  dependencies {
    // spring
    api('org.springframework.boot:spring-boot-starter-aop')
  }
}

project('triplestore') {
  dependencies {
    // projects
    api project(':cogni-sem')

    // libs
    api('org.apache.jena:jena-arq')
  }
}

project('triplestore-jena-memory') {
  dependencies {
    // projects
    api project(':cogni-sem')
    api project(':triplestore')

    // libs
    api('org.apache.jena:jena-tdb')

    // TESTING
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
  }

  test {
    minHeapSize = "256m"
    maxHeapSize = "256m"
    jvmArgs "-XX:MaxMetaspaceSize=128m"
  }
}

project('triplestore-tdb2') {
  dependencies {
    // projects
    api project(':cogni-sem')
    api project(':triplestore')
    api project(':transactional')

    // libs
    api('org.apache.jena:jena-arq')
    api('org.apache.jena:jena-tdb2')

    // spring
    api('org.springframework.boot:spring-boot-starter')

    // test
    testImplementation('io.vavr:vavr')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
  }
}

project('triplestore-pool-api') {
  dependencies {
    // projects
    compileOnly project(':triplestore')

    // libs
    compileOnly('org.apache.commons:commons-pool2')
  }
}

project('triplestore-tdb-pool') {
  dependencies {
    // projects
    api project(':triplestore-pool-api')
    api project(':triplestore-jena-memory')

    // libs
    api('org.apache.commons:commons-pool2')
    api('cglib:cglib')

    // TESTING
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
  }

  test {
    minHeapSize = "64m"
    maxHeapSize = "64m"
    jvmArgs "-XX:MaxMetaspaceSize=128m"
  }
}
